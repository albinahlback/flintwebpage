<h2>Benchmarks</h2>

<p>This page shows how FLINT compares to other software
on a selection of artificial benchmarks.</p>

<h3>Polynomial factorisation over Z/pZ</h3>

<p>Time (s) to factor the degree-<i>n</i> polynomial (<i>x</i> + 2<i>x</i> + 3<i>x</i><sup>3</sup> + ... + <i>n</i><i>x</i><sup><i>n</i></sup>) modulo 17.
CPU: AMD Opteron 6174 2.20 GHz, except Mathematica which was timed on a Xeon E5-2650, 2.00 GHz (>20% faster). FLINT, NTL and presumably also Magma use similar implementations of the Cantor-Zassenhaus algorithm with the Kaltofen-Shoup improvement, so this benchmark largely tests the speed of polynomial arithmetic.</p>

<div align="center">

<img src="bench_nmod_factor.png"/>

<table class="benchmark">
<tr><th><i>n</i></th> <th>Mathematica 9.0</th> <th>Pari/GP 2.5.4</th> <th>NTL 6.0.0</th> <th>Magma 2.19-8</th> <th>FLINT 2.4</th></tr>
<tr><td>10</td>       <td>0.000097</td>        <td>0.000046</td>      <td>0.000076</td>       <td>0.000085</td>     <td>0.000032</td></tr>
<tr><td>30</td>       <td>0.000415</td>        <td>0.000266</td>      <td>0.000493</td>       <td>0.000480</td>     <td>0.000303</td></tr>
<tr><td>100</td>      <td>0.00534</td>         <td>0.00229</td>       <td>0.00721</td>        <td>0.00461</td>      <td>0.00166</td></tr>
<tr><td>300</td>      <td>0.105</td>           <td>0.0303</td>        <td>0.0670</td>         <td>0.0404</td>       <td>0.0158</td></tr>
<tr><td>1000</td>     <td>3.88</td>            <td>2.46</td>          <td>0.601</td>          <td>0.559</td>        <td>0.228</td></tr>
<tr><td>3000</td>     <td>65.8</td>            <td>107</td>           <td>5.15</td>           <td>4.67</td>         <td>2.09</td></tr>
<tr><td>10000</td>    <td>1229</td>            <td>-</td>             <td>166</td>            <td>84.8</td>         <td>59.8</td></tr>
<tr><td>30000</td>    <td>-</td>               <td>-</td>             <td>825</td>            <td>664</td>          <td>376</td></tr>
</table>

</div>

<h3>Arithmetic with p-adic numbers</h3>

<p>Time (s) to compute a <i>p</i>-adic logarithm to precision 17<sup><i>n</i></sup>. CPU: Xeon X5670, 2.93 GHz.
FLINT uses rectangular splitting series evaluation for small <i>n</i>
and an asymptotically optimal algorithm
(based on balanced argument reduction and binary splitting series evaluation) for large <i>n</i>.</p>

<div align="center"><img src="bench_padic_log.png"/>

<table class="benchmark">
<tr><th><i>n</i></th> <th>Magma 2.18-6</th> <th>FLINT 2.3</th></tr>
<tr><td>32</td> <td>0.000131</td> <td>0.000018</td></tr>
<tr class="alt"><td>512</td> <td>0.011</td> <td>0.00047</td></tr>
<tr><td>8192</td> <td>12</td> <td>0.035</td></tr>
<tr class="alt"><td>131072</td> <td>13388</td> <td>2.4</td></tr>
</table>

</div>

<h3>Factorisation of word-size integers</h3>

<p>Time (s) to factor 10000 consecutive
<i>n</i>-bit integers (2<sup><i>n</i>-1</sup> + 1), ..., (2<sup><i>n</i>-1</sup> + 10000),
where <i>n</i> goes up to the word size (64 bits). CPU: Xeon E5-2650, 2.00 GHz.
FLINT uses a combination of trial division, Hart's One Line Factor
algorithm, SQUFOF, and quick tests for primes and perfect powers.
The slowdown very close to 64 bits is possibly due to the fact that FLINT
does not currently use the p+1 algorithm.</p>

<div align="center"><img src="bench_factor_64.png"/>

<table class="benchmark">
<tr><th><i>n</i></th> <th>Mathematica 9.0</th> <th>Pari/GP 2.5.4</th> <th>FLINT 2.4</th></tr>
<tr><td>16</td> <td>0.0720</td> <td>0.0160</td> <td>0.00476</td></tr>
<tr><td>24</td> <td>0.108</td> <td>0.0560</td> <td>0.0192</td></tr>
<tr><td>32</td> <td>0.272</td> <td>0.233</td> <td>0.0812</td></tr>
<tr><td>40</td> <td>0.960</td> <td>0.608</td> <td>0.199</td></tr>
<tr><td>48</td> <td>1.87</td> <td>1.17</td> <td>0.430</td></tr>
<tr><td>56</td> <td>2.76</td> <td>2.28</td> <td>1.19</td></tr>
<tr><td>64</td> <td>4.60</td> <td>4.21</td> <td>3.86</td></tr>
</table>

</div>

<h3>Power series over the real numbers</h3>

<p>Time (s) to compute the Taylor series exp(exp(1+<i>x</i>)) to order <i>x<sup>n</sup></i> at <i>n</i>-digit precision.
CPU: Xeon E5-2650, 2.00 GHz.
For large <i>n</i>, this example illustrates FLINT's
efficient arithmetic with polynomials that have both
high degree and large coefficients.
It should be noted that the timings are not perfectly comparable since
the results have different accuracy. Only FLINT 2.4/Arb computes
rigorous error bounds.
</p>

<div align="center"><img src="bench_real_exp_series.png"/>

<table class="benchmark">
<tr><th><i>n</i></th> <th>Mathematica 9.0</th> <th>Pari/GP 2.5.4</th> <th>FLINT 2.4/Arb</th></tr>
<tr><td>10</td> <td>0.000113</td> <td>0.000014</td> <td>0.000021</td></tr>
<tr><td>30</td> <td>0.000490</td> <td>0.000066</td> <td>0.000141</td></tr>
<tr><td>100</td> <td>0.00473</td> <td>0.00106</td> <td>0.00149</td></tr>
<tr><td>300</td> <td>0.0575</td> <td>0.0276</td> <td>0.0129</td></tr>
<tr><td>1000</td> <td>2.17</td> <td>1.66</td> <td>0.215</td></tr>
<tr><td>3000</td> <td>77.0</td> <td>68.7</td> <td>2.51</td></tr>
<tr><td>10000</td> <td>-</td> <td>-</td> <td>34.1</td></tr>
<tr><td>30000</td> <td>-</td> <td>-</td> <td>371</td></tr>
</table>

</div>

<h3>Generating Bernoulli numbers</h3>

<p>Time (s) to generate a table of the
Bernoulli numbers <i>B</i><sub>0</sub>, ..., <i>B</i><sub><i>n</i></sub>
as exact fractions. CPU: Xeon E5-2650, 2.00 GHz.
Pari/GP and FLINT 2.4/Arb compute the Bernoulli numbers
by numerical approximation of the Riemann zeta function.</p>

<div align="center"><img src="bench_bernoulli_vec.png"/>

<table class="benchmark">
<tr><th><i>n</i></th> <th>Mathematica 9.0</th> <th>Pari/GP 2.5.4</th> <th>FLINT 2.4/Arb</th></tr>
<tr><td>1000</td> <td>0.124</td> <td>0.0360</td> <td>0.0100</td></tr>
<tr><td>3000</td> <td>4.01</td> <td>0.913</td> <td>0.103</td></tr>
<tr><td>10000</td> <td>88.8</td> <td>52.4</td> <td>1.92</td></tr>
<tr><td>30000</td> <td>1817</td> <td>1653</td> <td>33.2</td></tr>
<tr><td>100000</td> <td>-</td> <td>-</td> <td>669</td></tr>
</table>

</div>

<h3>Integer partitions</h3>

<p>Time (s) to compute the exact value of the partition function <i>p</i>(<i>n</i>). CPU: Xeon X5675, 3.07 GHz.
All implementations (except Maple?) use the numerical Hardy-Ramanujan-Rademacher formula.
Out of the two FLINT implementations, the newer "FLINT 2.4/Arb" version implements a provably correct
algorithm (the older "FLINT 2.4" version depends on
heuristics, with most of the speedup for very small <i>n</i> coming from use of hardware floating-point arithmetic).</p>

<div align="center"><img src="bench_partition_function.png"/>


</div>

