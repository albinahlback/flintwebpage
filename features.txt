<h2>Features</h2>

<p>FLINT is a collection of modules, with an interface
similar to that of the <a href="http://gmplib.org/">GMP</a> library.
For example, the FLINT <tt>fmpz_poly</tt> module defines
the <tt>fmpz_poly_t</tt> type (representing a polynomial with multiprecision integer coefficients)
and provides methods such as <tt>fmpz_poly_add</tt>, <tt>fmpz_poly_gcd</tt>, etc.</p>

<h3>FLINT modules</h3>

<p>The following is a list of modules available in FLINT version 2.4,
and a summary of the features and algorithms in each module.
Besides the features listed explicitly, each module
implementing a specific type also provides methods for
arithmetic operations (add, sub, mul and so on), conversions
between types, random generation, and printing.
Some utility modules are omitted from the list.</p>

<p>Starting with FLINT 2.4, more specialised or experimental
modules are also available in the form of extension libraries (see
below).</p>

<h4>flintxx - C++ wrapper</h4>
<ul>
<li>Provides an object-oriented interface with operator overloading</li>
<li>Exposes most of the FLINT C functions</li>
<li>Uses C++98 expression templates to avoid temporary allocations and assignments, usually giving the same performance as hand-written C code</li>
</ul>

<h4>ulong_extras - functions for word-size integers</h4>
<ul>
<li>Functions work with unsigned integers all the way up to 32/64 bits</li>
<li>Division and modular arithmetic using precomputed inverses</li>
<li>Random number generation</li>
<li>Memory-efficient generation of primes (block sieve of Eratosthenes)</li>
<li>Fast factorisation (trial division, Hart's one line algorithm, SQUFOF)</li>
<li>Fast primality proving (verified BPSW test, Pocklington, pseudosquare)</li>
<li>Probable prime tests (BPSW, Fermat, Fibonacci, Lucas)</li>
<li>Square roots and modular square roots</li>
<li>Number-theoretic functions (GCD, Jacobi symbol, Euler phi, etc.)</li>
</ul>

<h4>qsieve - small quadratic field</h4>
<ul>
<li>Efficient factorisation of integers up to two words (64 or 128 bits)</li>
</ul>

<h4>fft - optimised Sch&ouml;nhage-Strassen FFT</h4>
<ul>
<li>Cache friendly up to huge transforms (integers of billions of bits)</li>
<li>Truncated -- no uglytwit performance jumps at power of 2 lengths and no problem
  with unbalanced multiplications</li>
<li>Truncated FFT/IFFT functions can be used for polynomial multiplication</li>
<li>Extremely fast (up to 30% faster than MPIR 2.4.0 and 70% faster than GMP 5.0.2 on a 2.2GHz AMD K10-2)</li>
<li>Easy to tune</li>
<li>This module is BSD licensed</li>
</ul>

<h4>fmpz - multiprecision integers</h4>
<ul>
<li>Tagged pointer representation, with integers up to 30 or 62 bits only using a single word and not requiring heap allocation</li>
<li>Caches larger integers for fast allocation and deallocation</li>
<li>Very efficient for small integers, and similar performance to the mpz type for large numbers</li>
<li>GCD, XGCD, LCM, Jacobi symbol, modular inverse, modular square roots</li>
<li>Factorials, Fibonacci numbers, binomial coefficients, rising factorials</li>
<li>Asymptotically fast multimodular reduction and Chinese remaindering via subproduct trees</li>
<li>Pseudosquare primality test</li>
</ul>

<h4>fmpz_factor - factoring multiprecision integers</h4>
<ul>
<li>Factors 32/64-bit integers quickly via ulong_extras</li>
<li>Trial division</li>
<li>Williams' p + 1 method</li>
</ul>

<h4>fmpz_mat - dense matrices over the integers</h4>
<ul>
<li>Classical and multimodular multiplication</li>
<li>Fast nonsingular solving (fraction-free, Dixon p-adic lifting)</li>
<li>Fast determinants (fraction-free, multimodular)</li>
<li>Reduced row echelon form, nullspace, inverse (fraction-free)</li>
<li>Characteristic polynomial</li>
</ul>

<h4>fmpz_mod_poly - dense univariate polynomials over Z/nZ for multiprecision n</h4>
<ul>
<li>Fast arithmetic based on the fmpz_poly module</li>
<li>Divide-and-conquer division and composition</li>
<li>GCD and XGCD (Euclidean)</li>
<li>Fast modular composition (Brent-Kung)</li>
<li>Fast multipoint evaluation</li>
</ul>

<h4>fmpz_mod_poly_factor - factoring in (Z/nZ)[x] for multiprecision n</h4>
<ul>
<li>Berlekamp, Cantor-Zassenhaus, Kaltofen-Shoup algorithms</li>
<li>Squarefree, distinct-degree and equal-degree factorisation</li>
</ul>

<h4>fmpz_poly - dense univariate polynomials over the integers</h4>
<ul>
<li>Embarrassingly fast multiplication (classical, Karatsuba, Kronecker substitution, Sch&ouml;nhage-Strassen)</li>
<li>Efficient truncated products (power series multiplication)</li>
<li>Evaluation and composition (Horner, divide-and-conquer)</li>
<li>Basecase and divide-and-conquer division and pseudodivision</li>
<li>Power series composition (Brent-Kung) and reversion (fast Lagrange)</li>
<li>Powering (binary algorithm, multinomial coefficients)</li>
<li>Taylor shift (basecase, divide-and-conquer)</li>
<li>GCD and XGCD (heuristic, multimodular), resultants</li>
<li>Restartable Hensel lifting</li>
<li>Interpolation, Chinese remaindering, bit packing</li>
</ul>

<h4>fmpz_poly_factor - factoring in Z[x]</h4>
<ul>
<li>Squarefree factorisation</li>
<li>Zassenhaus algorithm</li>
</ul>

<h4>fmpz_poly_mat - matrices over Z[x]</h4>
<ul>
<li>Multiplication (classical, Kronecker substitution)</li>
<li>Determinants (fraction-free, interpolation)</li>
<li>Reduced row echelon form, nullspace, inverse (fraction-free)</li>
</ul>

<h4>fmpz_poly_q - rational functions over Q</h4>
<ul>
<li>Efficient arithmetic based on the fmpz_poly module</li>
</ul>

<h4>fmpq - multiprecision rational numbers</h4>
<ul>
<li>Based on the fmpz type -- efficient representation of small rational numbers, and similar performance to the mpq type for large numbers</li>
<li>Rational reconstruction (balanced or unbalanced)</li>
<li>Conversion from continued fraction (subquadratic) and to continued fraction</li>
<li>Enumeration of the rationals (minimal height, Calkin-Wilf tree)</li>
</ul>

<h4>fmpq_mat - dense matrices over the rational numbers</h4>
<ul>
<li>Efficient multiplication, determinants and nonsingular solving dona via the integers</li>
<li>Reduced row echelon form (naive)</li>
</ul>

<h4>fmpq_poly - dense univariate polynomials over the rational numbers</h4>
<ul>
<li>Efficient representation with a single denominator, basing most operations on the fmpz_poly module</li>
<li>Fast multiplication, division, composition, powering, GCD, XGCD, LCM done via the integers</li>
<li>Fast power series composition and reversion</li>
<li>Functions of power series (inverse, sqrt, exp, log, sin, asin, ...)</li>
</ul>

<h4>nmod_mat - matrices over Z/nZ for word-size n</h4>
<ul>
<li>Classical and multimodular multiplication</li>
<li>Fast multiplication (reduction-free basecase, Strassen)</li>
<li>Block recursive LU decomposition, reduced row echelon form, nullspace, inverse</li>
<li>Determinant, rank, trace</li>
</ul>

<h4>nmod_poly - dense univariate polynomials over Z/nZ for word-size n</h4>
<ul>
<li>Embarrassingly fast multiplication (classical, Kronecker substitution, David Harvey's KS2 and KS4)</li>
<li>Fast division (basecase, divide-and-conquer, Newton)</li>
<li>Divide-and-conquer composition</li>
<li>Fast GCD and XGCD (Euclidean, half gcd)</li>
<li>Fast modular composition</li>
<li>Fast multipoint evaluation and interpolation</li>
<li>Fast Taylor shift (basecase, convolution)</li>
<li>Fast power series composition and reversion (Brent-Kung, fast Lagrange)</li>
<li>Functions of power series (inverse, sqrt, exp, log, sin, asin, ...)</li>
</ul>

<h4>nmod_mod_poly_factor - factoring in (Z/nZ)[x] for word-size n</h4>
<ul>
<li>Berlekamp, Cantor-Zassenhaus, Kaltofen-Shoup algorithms</li>
<li>Squarefree, distinct-degree and equal-degree factorisation</li>
<li>Irreducibility testing</li>
<li>Power hack for polynomials of special form</li>
</ul>

<h4>nmod_poly_mat - matrices over Z/nZ[x] for word-size n</h4>
<ul>
<li>Multiplication (classical, Kronecker substitution, interpolation)</li>
<li>Determinants (fraction-free, interpolation)</li>
<li>Reduced row echelon form, nullspace, inverse (fraction-free)</li>
</ul>

<h4>padic - p-adic numbers</h4>
<ul>
<li>Efficient representation based on the fmpz type</li>
<li>Inverse and square root (Newton iteration)</li>
<li>Exp and log (rectangular splitting, binary splitting)</li>
<li>Teichmuller lift</li>
</ul>

<h4>padic_poly - polynomials over the p-adic numbers</h4>
<ul>
<li>Efficient representation based on the fmpz_poly module</li>
</ul>

<h4>padic_mat - matrices over the p-adic numbers</h4>
<ul>
<li>Efficient representation based on the fmpz_mat module</li>
</ul>

<h4>qadic - unramified extensions of the p-adic numbers</h4>
<ul>
<li>Standardised representation using Conway polynomials</li>
<li>Inverse and square root (Newton iteration)</li>
<li>Exp and log (rectangular splitting, binary splitting)</li>
<li>Teichmuller lift</li>
</ul>

<h4>fq / fq_nmod / fq_zech - finite fields F_q</h4>
<ul>
<li>Three implementations optimised for different sizes: multi-precision primes, single-precision primes, and Zech logarithms</li>
<li>Construction of finite fields using Conway polynomials or user-defined polynomials</li>
<li>Powers, roots, Frobenius map, trace</li>
<li>Bit packing</li>
</ul>

<h4>fq_mat / fq_nmod_mat / fq_zech_mat - dense matrices over finite fields F_q</h4>
<ul>
<li>Classical and Kronecker substitution matrix multiplication</li>
<li>Block recursive LU decomposition, reduced row echelon form, solving</li>
</ul>

<h4>fq_poly / fq_nmod_poly / fq_zech_poly - dense univariate polynomials over finite fields F_q</h4>
<ul>
<li>Fast multiplication (classical, reordering, Kronecker substitution)</li>
<li>Fast division (basecase, divide-and-conquer, Newton)</li>
<li>Divide-and-conquer composition</li>
<li>Fast GCD and XGCD (Euclidean, half gcd)</li>
<li>Fast modular composition (Brent-Kung)</li>
</ul>

<h4>fq_poly_factor / fq_nmod_poly_factor / fq_zech_poly_factor - factorisation of polynomials over F_q</h4>
<ul>
<li>Berlekamp, Cantor-Zassenhaus, Kaltofen-Shoup algorithms</li>
<li>Squarefree, distinct-degree and equal-degree factorisation</li>
<li>Irreducibility testing</li>
</ul>

<h4>arith - miscellaneous arithmetic functions</h4>
<ul>
<li>Bernoulli, Euler, Bell, Stirling numbers</li>
<li>Fast computation of the integer partition function</li>
<li>Divisor sum, Euler phi and M&ouml;bius mu functions</li>
<li>Sum of squares counting</li>
<li>Cyclotomic, Chebyshev, Legendre, Swinnerton-Dyer polynomials</li>
<li>Dedekind sums</li>
</ul>

<h3>FLINT 1.x only</h3>

<p>The following features are currently only available in the FLINT 1.x series,
and will be ported to the FLINT 2.x series in the future
(help with this is welcome).</p>

<ul>
<li>Lattice reduction (optimised LLL, especially for knapsack lattices); faster factorisation in Z[x]</li>
<li>Large quadratic sieve for factorisation of integers >128 bits</li>
</ul>

<h3>Antic extension library</h3>

<p>The <a href="http://github.com/wbhart/antic">Antic</a> library
adds support for algebraic number theory.
Antic can be installed by passing <tt>--extensions=/path/to/antic</tt>
to the configure script when building FLINT.
Antic includes the following modules.</p>

<h4>qfb - binary quadratic forms</h4>
<ul>
<li>Fast composition (Shanks' NUCOMP, NUDUPL)</li>
<li>Computation of reduced forms</li>
<li>Computation of the exponent of the class group (rigorously or assuming GRH)</li>
</ul>

<h4>nf_elem - elements of number fields</h4>
<ul>
<li>Fast number field arithmetic based on the FLINT fmpq_poly type</li>
</ul>

<h3>Arb extension library</h3>

<p>The <a href="http://fredrikj.net/arb">Arb</a> library
adds support for fast arbitrary-precision real and complex numbers with
rigorous error control (using ball interval arithmetic).
It supports polynomials, power series, matrices, and evaluation of special functions.
Arb can be installed by passing <tt>--extensions=/path/to/arb</tt>
to the configure script when building FLINT.
Arb includes the following modules.</p>

<h4>fmpr - binary floating-point numbers</h4>
<ul>
<li>Efficient representation at word-size precision (up to 30/62 bits)</li>
<li>Dynamic allocation, supporting integer-valued numbers efficiently</li>
<li>Supports arbitrary-precision exponents</li>
<li>Supports correct directed rounding (up/down/floor/ceiling)</li>
</ul>

<h4>fmprb - real numbers represented as floating-point balls</h4>
<ul>
<li>All operations support arbitrary precision with automatic, rigorous error bounds</li>
<li>Interval predicates (is positive, contains unique integer, etc.)</li>
<li>Mathematical constants (pi, e, gamma, Catalan, ...)</li>
<li>Elementary functions (sqrt, pow, exp, log, sin, ...)</li>
<li>Rapid computation of special trigonometric values</li>
<li>Special functions (gamma, digamma, log gamma, rising factorials, Riemann zeta function)</li>
</ul>

<h4>fmpcb - complex numbers</h4>
<ul>
<li>Complex floating-point arithmetic based on the fmprb type</li>
<li>All operations support arbitrary precision with automatic, rigorous error bounds</li>
<li>Interval predicates</li>
<li>Elementary functions (sqrt, pow, exp, log, sin, ...)</li>
<li>Rapid computation of roots of unity</li>
<li>Special functions (gamma, digamma, log gamma, rising factorials, Riemann zeta function, Hurwitz zeta function)</li>
</ul>

<h4>fmprb_poly - polynomials over the real numbers</h4>
<ul>
<li>All operations support arbitrary precision with automatic, rigorous error bounds</li>
<li>Numerically stable fast multiplication (scaling and blockwise multiplication over Z[x])</li>
<li>Efficient truncated (power series) multiplication</li>
<li>Fast division and power series division (Newton iteration)</li>
<li>Composition (divide and conquer)</li>
<li>Power series composition (Brent-Kung) and reversion (fast Lagrange)</li>
<li>Evaluation (Horner, Paterson-Stockmeyer)</li>
<li>Fast multipoint evaluation and interpolation</li>
<li>Borel and binomial transforms</li>
<li>Power series of elementary functions (sqrt, pow, exp, log, sin, ...)</li>
<li>Power series of special functions (gamma, digamma, log gamma, rising factorials, Riemann and Hurwitz zeta functions, Riemann-Siegel theta and Z-functions)</li>
<li>Asymptotically fast root polishing</li>
</ul>

<h4>fmpcb_poly - polynomials over the complex numbers</h4>
<ul>
<li>All operations support arbitrary precision with automatic, rigorous error bounds</li>
<li>Numerically stable fast multiplication (real decomposition)</li>
<li>Fast division and power series division (Newton iteration)</li>
<li>Composition (divide and conquer)</li>
<li>Power series composition (Brent-Kung) and reversion (fast Lagrange)</li>
<li>Evaluation (Horner, Paterson-Stockmeyer)</li>
<li>Fast multipoint evaluation and interpolation</li>
<li>Power series of elementary functions (sqrt, pow, exp, log, sin, ...)</li>
<li>Power series of special functions (gamma, digamma, log gamma, rising factorials, Riemann and Hurwitz zeta functions)</li>
<li>Isolation of all complex roots (Durand-Kerner iteration followed by verification)</li>
</ul>

<h4>fmprb_mat - matrices over the real numbers</h4>
<ul>
<li>All operations support arbitrary precision with automatic, rigorous error bounds</li>
<li>Multithreaded matrix multiplication</li>
<li>LU decomposition</li>
<li>Nonsingular solving, inverse, determinant</li>
</ul>

<h4>fmpcb_mat - matrices over the complex numbers</h4>
<ul>
<li>All operations support arbitrary precision with automatic, rigorous error bounds</li>
<li>LU decomposition</li>
<li>Nonsingular solving, inverse, determinant</li>
</ul>

<h4>fmprb_calc - calculus with real-valued functions</h4>
<ul>
<li>Rigorous isolation of roots (interval bisection)</li>
<li>Asymptotically fast root polishing (Newton iteration with rigorous error bounds)</li>
</ul>

<h4>fmpcb_calc - calculus with complex-valued functions</h4>
<ul>
<li>Numerical integration (Taylor algorithm with rigorous error bounds)</li>
</ul>

<h3>Other extension libraries</h3>

<p>
The following extension libraries for FLINT are experimental.
They can be installed by passing
<tt>--extensions=/path/to/extension1:/path/to/extension2:...</tt> to the
configure script when building FLINT.</p>

<dl>

<dt><a href="https://github.com/fredrik-johansson/bland">bland - recursive generics</a></dt>
<dd>Supports working with recursively constructed rings over several ground types.
In particular, it allows working with recursive dense multivariate polynomials
and matrices over generic rings.</dd>

</dl>

